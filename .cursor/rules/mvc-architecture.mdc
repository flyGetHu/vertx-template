---
description:
globs:
alwaysApply: false
---
---
description: "MVC架构模式规范 - 控制器、服务、仓库、模型层的设计原则和数据流程"
auto_attachments:
  - "src/**/controller/*.java"
  - "src/**/service/*.java"
  - "src/**/repository/*.java"
  - "src/**/model/*.java"
  - "src/**/routes/*.java"
---

# MVC架构模式

本项目采用扩展的MVC(Model-View-Controller)架构模式，结合响应式编程和依赖注入实现可维护、可测试的代码结构。

## 架构层次

### 1. 控制器层 (Controller)
- 负责接收HTTP请求并调用服务层
- 处理参数验证和请求路由
- 不包含业务逻辑，只负责协调
- 示例：[UserController.java](mdc:src/main/java/com/vertx/template/controller/UserController.java)

### 2. 服务层 (Service)
- 包含核心业务逻辑
- 处理业务规则和数据转换
- 返回Future对象实现异步操作
- 接口与实现分离，便于测试和替换
- 示例：
  - [UserService.java](mdc:src/main/java/com/vertx/template/service/UserService.java) (接口)
  - [UserServiceImpl.java](mdc:src/main/java/com/vertx/template/service/impl/UserServiceImpl.java) (实现)

### 3. 数据访问层 (Repository)
- 负责与数据源交互（数据库、外部API等）
- 提供数据的CRUD操作
- 返回Future对象实现异步操作
- 示例：`UserRepository.java`

### 4. 模型层 (Model)
- 定义数据结构和业务对象
- POJO类、数据传输对象(DTO)
- 示例：[User.java](mdc:src/main/java/com/vertx/template/model/User.java)

### 5. 路由层 (Routes)
- 定义API端点和HTTP方法
- 将请求映射到控制器方法
- 实现了RouteGroup接口的模块化设计
- 示例：[UserRoutes.java](mdc:src/main/java/com/vertx/template/routes/UserRoutes.java)

## 数据流程

1. 请求进入路由层（Routes）
2. 路由将请求传递给控制器（Controller）
3. 控制器验证请求并调用服务（Service）
4. 服务执行业务逻辑，可能调用仓库（Repository）
5. 服务返回结果（通过Future）给控制器
6. 控制器通过ResponseHandler包装响应
7. 响应返回给客户端

## 最佳实践

- 控制器方法应该简短，主要负责参数验证和服务调用
- 所有业务逻辑都应该放在服务层
- 使用接口定义服务契约，实现依赖倒置原则
- 使用Future处理异步操作，避免阻塞事件循环
- 使用BusinessException表示可预期的业务错误
