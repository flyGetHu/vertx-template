---
description:
globs:
alwaysApply: false
---
---
description: "JDK21虚拟线程与Future.await使用指南 - 异步代码同步化和虚拟线程最佳实践"
auto_attachments:
  - "src/**/Run.java"
  - "src/**/MainVerticle.java"
  - "src/**/controller/*.java"
  - "src/**/service/*.java"
---

# JDK21虚拟线程与Future.await使用指南

本项目充分利用JDK21虚拟线程特性，使用`Future.await()`方法简化异步代码。

## 核心用法

在项目中，我们使用虚拟线程和`Future.await()`方法将异步代码转换为同步风格：

```java
// 使用await直接获取结果，而不是使用回调
JsonObject config = Future.await(ConfigLoader.loadConfig(vertx));

// 直接获取服务结果
List<User> users = Future.await(userService.getUsers());
```

## 关键文件

以下文件展示了不同情境下的`Future.await()`使用方式：

- [MainVerticle.java](mdc:src/main/java/com/vertx/template/MainVerticle.java) - 在Verticle启动流程中使用await
- [ConfigLoader.java](mdc:src/main/java/com/vertx/template/config/ConfigLoader.java) - 在配置加载中使用await
- [UserController.java](mdc:src/main/java/com/vertx/template/controller/UserController.java) - 在HTTP处理器中使用await
- [Run.java](mdc:src/main/java/com/vertx/template/Run.java) - 应用程序入口使用虚拟线程模式

## 注意事项

1. `Future.await()`只能在虚拟线程上调用，否则会抛出异常
2. 项目已配置使用虚拟线程启动Verticle，所有处理器都可以安全使用`Future.await()`
3. 使用try/catch处理异常，替代原有的`.onFailure()`处理方式
4. 不需要显式创建或管理虚拟线程，框架已自动处理
