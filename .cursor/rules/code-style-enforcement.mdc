---
description:
globs:
alwaysApply: false
---
---
description: "代码风格自动化工具配置 - Spotless插件使用指南和Git Hooks集成"
auto_attachments:
  - "pom.xml"
  - "**/*.java"
  - ".gitignore"
---

# 代码风格自动化工具

本项目使用Spotless作为代码风格检查和格式化工具，确保代码库保持一致的编码风格。

## Spotless配置说明

项目在Maven中集成了Spotless插件，通过[pom.xml](mdc:pom.xml)配置：

```xml
<plugin>
  <groupId>com.diffplug.spotless</groupId>
  <artifactId>spotless-maven-plugin</artifactId>
  <version>${spotless.version}</version>
  <configuration>
    <!-- 通用配置 -->
    <encoding>UTF-8</encoding>
    <!-- Java文件格式化配置 -->
    <java>
      <!-- 指定要格式化的Java文件 -->
      <includes>
        <include>src/main/java/**/*.java</include>
        <include>src/test/java/**/*.java</include>
      </includes>
      <importOrder />
      <prettier />
      <removeUnusedImports />
      <formatAnnotations />
    </java>
  </configuration>
</plugin>
```

## 从PMD到Spotless的迁移

本项目原先使用PMD进行代码质量检查，现已迁移到Spotless。迁移原因：

1. **简化工具链**：Spotless既能格式化代码，又能执行基本的代码质量检查，减少了维护多个工具的成本
2. **自动修复能力**：Spotless可以自动修复大多数格式问题，而PMD只能报告问题
3. **更少的误报**：Spotless专注于格式问题，减少了常见的误报情况
4. **更好的开发体验**：开发人员可以一键修复格式问题，提高工作效率

## Git Hooks集成

项目使用Git Hooks确保代码提交前进行格式检查。相关配置在[githooks/pre-commit](mdc:githooks/pre-commit)中：

```bash
./mvnw spotless:check -q || {
  echo "代码风格检查未通过，正在尝试自动修复..."
  ./mvnw spotless:apply -q
  if [ $? -ne 0 ]; then
    echo "[ERROR] 代码格式化未通过，请修复后再提交。"
    exit 1
  fi
  echo "✓ 代码自动格式化成功，请检查更改后再次提交"
  exit 1  # 仍然退出，让用户检查自动修复的更改
}
```

## 使用指南

### 本地格式化代码

执行以下命令检查代码格式：

```bash
mvn spotless:check
```

如有格式问题，可自动修复：

```bash
mvn spotless:apply
```

### 集成开发环境(IDE)设置

为获得最佳体验，建议在IDE中安装Spotless插件或配置IDE格式化规则与项目保持一致。

#### IntelliJ IDEA
- 安装"Save Actions"插件
- 配置自动格式化和导入优化

#### VS Code
- 安装"Java Extension Pack"
- 在settings.json中配置format on save

## 最佳实践

1. **提交前格式化**：使用`mvn spotless:apply`确保代码符合规范再提交
2. **遵循项目编码规范**：参考[coding-standards.mdc](mdc:coding-standards.mdc)了解具体编码要求
3. **代码审查关注逻辑**：由于格式问题已自动处理，代码审查可专注于业务逻辑和架构

## 常见问题

### Q: 如何临时禁用Spotless检查？
A: 在特殊情况下，可使用`-DspotlessSkip=true`参数临时跳过检查：
```bash
mvn clean package -DspotlessSkip=true
```

### Q: 特定代码段需要保持原样怎么办？
A: 可以使用格式化关闭/开启标记：
```java
// @formatter:off
特定格式的代码（如表格式数据）
// @formatter:on
```

### Q: Spotless和提交消息格式检查的区别？
A: Spotless检查代码风格，而[githooks/commit-msg](mdc:githooks/commit-msg)检查提交消息格式，两者互补确保项目质量。
