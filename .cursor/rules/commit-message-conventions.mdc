---
description:
globs:
alwaysApply: false
---
# 提交消息格式规范

本项目采用严格的提交消息格式规范，以保持版本历史的清晰性和可追踪性。

## 提交消息格式

所有提交消息必须遵循以下格式：

```
类型(范围): 描述
```

### 格式说明

- **类型**：表示提交的类别，必须是预定义类型之一（见下文）
- **范围**：表示修改影响的范围，通常是模块、包或功能名
- **描述**：简明扼要的变更说明，首字母无需大写，句末无需标点

## 支持的提交类型

| 类型     | 说明                           | 示例                                 |
|----------|--------------------------------|--------------------------------------|
| feat     | 新功能                         | `feat(user): 新增用户登录功能`       |
| fix      | 修复Bug                        | `fix(auth): 修复token过期判断逻辑`   |
| docs     | 文档变更                       | `docs(api): 更新API文档`             |
| style    | 代码风格、格式调整             | `style(all): 格式化代码`             |
| refactor | 代码重构                       | `refactor(db): 重构数据库连接池`     |
| test     | 添加/修改测试                  | `test(service): 添加用户服务单元测试`|
| chore    | 构建过程或辅助工具变动         | `chore(deps): 升级依赖版本`          |
| perf     | 性能优化                       | `perf(query): 优化查询性能`          |
| ci       | CI/CD配置变更                  | `ci(workflow): 修改Github Actions配置`|
| build    | 构建系统变更                   | `build(maven): 更新Maven插件配置`    |
| revert   | 回退提交                       | `revert: 回退提交abc123`             |
| merge    | 分支合并                       | `merge(develop): 合并开发分支`       |
| release  | 发布版本                       | `release: v1.0.0版本发布`            |
| optimize | 功能优化                       | `optimize(cache): 优化缓存策略`      |

## Git Hooks集成

本项目使用git hook自动检查提交消息格式。相关配置在[githooks/commit-msg](mdc:githooks/commit-msg)中：

```bash
#!/usr/bin/env bash
set -e

msg=$(cat "$1")

# 严格模式：类型(范围): 描述，类型和范围必须符合规范，冒号后必须有空格
if ! echo "$msg" | grep -Eq '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert|merge|release|optimize)\([a-zA-Z0-9_-]+\): .+'; then
  echo "================ 提交信息格式错误 ================"
  echo "提交信息必须遵循以下严格格式："
  echo "  类型(范围): 描述"
  echo "  例如：feat(core): 新增用户登录功能"
  # ... 错误提示内容 ...
  exit 1
fi

echo "✓ 提交信息格式正确"
```

## 最佳实践

1. **明确的范围**：使用具体的功能模块或组件名作为范围，如`user`、`auth`、`api`等
2. **简洁的描述**：提交描述应简明扼要，理想长度不超过50个字符
3. **一次提交一个变更**：尽量将不相关的变更拆分为多个提交
4. **使用正确的类型**：根据实际变更选择最贴合的类型

## 示例

```
feat(auth): 添加OAuth2认证支持
fix(api): 修复用户查询接口参数验证bug
docs(readme): 更新项目说明文档
style(java): 统一代码缩进风格
refactor(service): 重构用户服务实现
test(unit): 增加UserService单元测试
chore(deps): 升级vertx依赖到4.5.14
perf(query): 优化数据库查询性能
ci(jenkins): 更新Jenkins构建脚本
build(maven): 添加代码覆盖率报告插件
revert: 回退提交a1b2c3d
merge(feature): 合并特性分支到开发分支
release: v1.2.0发布
optimize(cache): 优化缓存刷新策略
```

## 提交历史示例

良好的提交历史应如下所示：

```
* 38a2f43 (HEAD -> main) docs(readme): 更新安装说明
* 59c1e47 fix(auth): 修复令牌刷新逻辑
* f7c42b1 feat(user): 添加用户头像上传功能
* 2e7db87 refactor(api): 统一API响应格式
* 1a485d9 test(service): 添加用户服务测试用例
```

## 相关资源

- [约定式提交规范](https://www.conventionalcommits.org/zh-hans/v1.0.0/)
- [语义化版本](https://semver.org/lang/zh-CN/)
- [代码风格自动化工具](mdc:code-style-enforcement.mdc)
