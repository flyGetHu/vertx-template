---
description:
globs:
alwaysApply: false
---
---
description: "YAML配置系统指南 - Vert.x Config模块使用、配置文件结构和优先级规则"
auto_attachments:
  - "src/main/resources/config.yml"
  - "src/**/config/*.java"
  - "src/**/ConfigLoader.java"
---

# YAML配置系统指南

本项目使用Vert.x Config模块从YAML文件加载配置。

## 配置文件结构

主配置文件[config.yml](mdc:src/main/resources/config.yml)组织为多个部分：

```yaml
# 服务器配置
server:
  port: 8888
  host: localhost

# 日志配置
logging:
  enabled: true
  request_log: true
  level: INFO

# CORS配置
cors:
  enabled: true
  allowed_origins: "*"
  allowed_methods:
    - GET
    - POST
    - PUT
    - DELETE
  allowed_headers:
    - Content-Type
    - Authorization
```

## 配置加载

[ConfigLoader](mdc:src/main/java/com/vertx/template/config/ConfigLoader.java)类负责加载和缓存配置：

```java
// 配置加载示例
JsonObject config = Future.await(ConfigLoader.loadConfig(vertx));

// 获取缓存的配置
JsonObject cachedConfig = ConfigLoader.getConfig();
```

## 配置使用

在代码中访问配置的示例：

```java
// 获取服务器配置
JsonObject serverConfig = config.getJsonObject("server", new JsonObject());
int port = serverConfig.getInteger("port", 8888);
String host = serverConfig.getString("host", "localhost");

// 获取嵌套配置并提供默认值
JsonObject corsConfig = config.getJsonObject("cors", new JsonObject());
boolean corsEnabled = corsConfig.getBoolean("enabled", true);
```

## 配置优先级

配置加载过程遵循以下优先级（从高到低）：

1. 系统属性 (`-D`参数)
2. 环境变量
3. 配置文件 (config.yml)

可以通过环境变量或系统属性覆盖任何YAML配置。
