---
description:
globs: *.java
alwaysApply: false
---
---
description: "Vert.x项目Java编码规范 - 定义变量声明、方法设计、异常处理、路由控制器等编码标准"
auto_attachments:
  - "**/*.java"
  - "pom.xml"
---

# Vert.x 项目编码标准

## 📋 核心编码原则

### 变量声明规范（遵循阿里巴巴规范）
- **默认使用 `final`**：所有变量默认声明为 `final`
- **命名约定**：
  - 局部变量：小驼峰（`userId`, `productName`）
  - 常量：全大写+下划线（`MAX_RETRY_COUNT`）
  - 成员变量：小驼峰，无前缀（`userService`）
  - 类名：大驼峰（`UserController`, `ApiResponse`）
- **集合类型**：优先使用不可变集合 `List.of()`, `Set.of()`, `Map.of()`

```java
// ✅ 推荐
final String userId = "123";
final List<String> names = List.of("Alice", "Bob");
final Map<String, Object> config = Map.of("port", 8080);

// ❌ 避免
String userId = "123";  // 缺少final
ArrayList<String> names = new ArrayList<>();  // 非线程安全
```

### 方法设计规范
- **行数限制**：方法最大30行
- **参数限制**：最多3个参数，超过使用DTO对象
- **单一职责**：一个方法只做一件事
- **异步方法**：使用 `Future.await()` 处理异步操作

```java
// ✅ 推荐
public User getUserById(final String id) {
    return Future.await(userRepository.findById(id));
}

// ❌ 避免：返回 Future
public Future<User> getUserById(String id) {
    return userRepository.findById(id);
}
```

## 🧵 JDK21虚拟线程使用规范

### 核心原则
- **禁止返回Future**：所有方法直接返回具体类型
- **使用Future.await()**：在方法内部处理异步操作
- **异常直接抛出**：不要将异常包装在Future中

### 标准模式
```java
// 控制器层
@GetMapping("/users/:id")
public User getUserById(@PathParam("id") String id) {
    return Future.await(userService.getUserById(id));
}

// 服务层
public List<User> getActiveUsers() {
    final List<User> users = Future.await(userRepository.findAll());
    return users.stream()
        .filter(User::isActive)
        .collect(Collectors.toList());
}

// 异常处理
public void processOrder(String orderId) {
    try {
        final Order order = Future.await(orderService.getOrder(orderId));
        Future.await(paymentService.processPayment(order));
    } catch (OrderNotFoundException e) {
        log.error("订单不存在: {}", orderId);
        throw e;
    }
}
```

## 🗄️ 数据库实体映射规范

### 类型映射表
| MySQL类型 | Java类型 | Row获取方法 | 示例 |
|-----------|----------|-------------|------|
| BIGINT | Long | `getLong()` | `row.getLong("id")` |
| VARCHAR | String | `getString()` | `row.getString("username")` |
| DATETIME | LocalDateTime | `getLocalDateTime()` | `row.getLocalDateTime("created_at")` |
| DECIMAL | BigDecimal | `getBigDecimal()` | `row.getBigDecimal("price")` |
| BOOLEAN | Boolean | `getBoolean()` | `row.getBoolean("active")` |
| JSON | JsonObject | `getJson()` | `row.getJson("metadata")` |

### 实体类标准结构
```java
@Data
@Table("users")
public class User extends BaseEntity {
    @Id
    private Long id;

    @NotBlank(message = "用户名不能为空")
    @Size(min = 3, max = 50)
    private String username;

    @Email(message = "邮箱格式不正确")
    private String email;

    @Column(value = "created_at", updatable = false)
    private LocalDateTime createdAt;

    // 必需的fromRow方法
    public static User fromRow(Row row) {
        if (row == null) return null;

        final User user = new User();
        user.setId(row.getLong("id"));
        user.setUsername(row.getString("username"));
        user.setEmail(row.getString("email"));
        user.setCreatedAt(row.getLocalDateTime("created_at"));
        return user;
    }
}
```

### 命名约定
- **数据库字段**：下划线分隔（`created_at`, `user_name`）
- **Java字段**：驼峰命名（`createdAt`, `userName`）
- **自动映射**：简单字段无需注解，复杂情况使用 `@Column`

## 📡 API响应处理规范

### 统一响应格式
```json
{
  "code": 200,
  "message": "success",
  "data": { /* 业务数据 */ },
  "timestamp": "2024-01-01T12:00:00Z"
}
```

### 控制器标准写法
```java
@RestController
@RequestMapping("/api/users")
@Singleton
public class UserController {

    @Inject
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/:id")
    public User getUserById(@PathParam("id") String id) {
        // 直接返回业务数据，自动包装为标准响应
        return Future.await(userService.getUserById(id));
    }

    @PostMapping("")
    public User createUser(@Valid @RequestBody CreateUserRequest request) {
        return Future.await(userService.createUser(request));
    }
}
```

### 异常处理
```java
// 业务异常
if (StringUtils.isBlank(id)) {
    throw new ValidationException("用户ID不能为空");
}

// 自定义异常
public class UserNotFoundException extends BusinessException {
    public UserNotFoundException(String userId) {
        super(404, "用户不存在: " + userId);
    }
}
```

## ✅ 参数验证规范

### Bean Validation注解
```java
public class CreateUserRequest {
    @NotBlank(message = "用户名不能为空")
    @Size(min = 3, max = 20, message = "用户名长度必须在3-20之间")
    private String username;

    @Email(message = "邮箱格式不正确")
    @NotBlank(message = "邮箱不能为空")
    private String email;

    @Min(value = 18, message = "年龄不能小于18岁")
    private Integer age;
}
```

### 路由注解使用
```java
@GetMapping("/users")
public List<User> getUsers(
    @QueryParam("page") Integer page,
    @QueryParam("size") Integer size) {
    // 查询参数自动解析和类型转换
}

@PostMapping("/users")
public User createUser(@Valid @RequestBody CreateUserRequest request) {
    // 自动验证请求体
}
```

## 🔧 代码风格工具

### Spotless配置
- **格式化命令**：`mvn spotless:apply`
- **检查命令**：`mvn spotless:check`
- **Git Hook**：提交前自动格式化
- **IDE集成**：保存时自动格式化

### 提交消息规范
格式：`类型(范围): 描述`

**支持的类型**：
- `feat`: 新功能
- `fix`: 修复Bug
- `docs`: 文档变更
- `style`: 代码风格调整
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建工具变更

**示例**：
```
feat(user): 添加用户登录功能
fix(auth): 修复token过期判断逻辑
docs(api): 更新API文档
```

## 📝 日志记录规范

### 日志级别使用
| 级别 | 用途 | 示例场景 |
|------|------|----------|
| ERROR | 系统错误 | 数据库连接失败、未捕获异常 |
| WARN | 警告信息 | 配置缺失、性能警告 |
| INFO | 重要业务信息 | 用户登录、订单创建 |
| DEBUG | 调试信息 | 方法调用、参数值 |

### 日志记录示例
```java
@Slf4j
public class UserService {
    public User createUser(CreateUserRequest request) {
        log.info("Creating user with username: {}", request.getUsername());

        try {
            User user = Future.await(userRepository.save(request.toUser()));
            log.info("User created successfully with ID: {}", user.getId());
            return user;
        } catch (Exception e) {
            log.error("Failed to create user: {}", request.getUsername(), e);
            throw e;
        }
    }
}
```

### 敏感信息处理
```java
// ❌ 避免：记录敏感信息
log.info("User login: username={}, password={}", username, password);

// ✅ 推荐：脱敏处理
log.info("User login: username={}, password=***", username);
```

## 🚨 异常处理最佳实践

### 异常分层
```java
// 系统异常 - 技术错误，返回500
public class SystemException extends RuntimeException {
    public SystemException(String message, Throwable cause) {
        super(message, cause);
    }
}

// 业务异常 - 业务逻辑错误，返回400-499
public class BusinessException extends RuntimeException {
    private final int code;

    public BusinessException(int code, String message) {
        super(message);
        this.code = code;
    }
}

// 验证异常 - 参数验证失败，返回400
public class ValidationException extends BusinessException {
    public ValidationException(String message) {
        super(400, message);
    }
}
```

### 异常使用示例
```java
public User getUserById(String id) {
    if (StringUtils.isBlank(id)) {
        throw new ValidationException("用户ID不能为空");
    }

    User user = Future.await(userRepository.findById(id));
    if (user == null) {
        throw new BusinessException(404, "用户不存在: " + id);
    }

    return user;
}
```

## 📋 代码审查清单

### 必须检查项
- [ ] 所有变量是否使用 `final` 声明
- [ ] 方法是否直接返回具体类型（非Future）
- [ ] 是否正确使用 `Future.await()`
- [ ] 实体类是否包含 `fromRow` 方法
- [ ] 是否添加必要的验证注解
- [ ] 异常处理是否规范
- [ ] 日志记录是否完整且不包含敏感信息
- [ ] 提交消息是否符合规范

### 性能检查项
- [ ] 是否避免在循环中进行数据库查询
- [ ] 是否使用合适的集合类型
- [ ] 是否正确处理大数据量操作
- [ ] 是否避免不必要的对象创建
